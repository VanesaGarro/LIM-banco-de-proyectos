{"version":3,"sources":["assets/images/heart.svg","assets/images/pinterest.svg","assets/images/download.svg","controller/SearchCollection.js","components/Menu.jsx","components/PhotoCards.jsx","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchCollection","page","query","fetch","method","headers","then","res","status","console","log","json","Promise","reject","Menu","search","getCategory","setcategory","className","src","logo","alt","type","onClick","document","getElementById","value","onSubmit","event","preventDefault","placeholder","name","onKeyPress","id","PhotoCards","photo","username","profileImage","description","imgDownload","altDescription","likes","useState","showModal","setModal","key","Modal","size","show","onHide","Header","closeButton","Body","Image","fluid","heart","href","title","dwnl","Home","dataCollection","setDataCollecion","category","pageNumber","setPageNumber","setPage","results","useEffect","e","target","dataLength","length","hasMore","next","prev","Set","map","urls","small","user","profile_image","links","download","alt_description","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.544ac799.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart.2d6e1dd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/pinterest.098da3c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/download.3f145989.svg\";","const clientID = 'd2mtAfA49OpMr-XGxS-8jyfpUL1Qpm6uaQ3fXNZpZzQ';\r\nconst SearchCollection = (page, query) => fetch(`https://api.unsplash.com/search/photos?&page=${page}&query=${query}&client_id=${clientID}&per_page=30`, {\r\n  method: 'GET',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n}).then((res) => {\r\n  if (res.status === 200) {\r\n    console.log(query);\r\n    return res.json();\r\n  }\r\n  return Promise.reject(console.log(res));\r\n});\r\n\r\nexport default SearchCollection;\r\n","import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport './Menu.css';\r\nimport PropTypes from 'prop-types';\r\nimport logo from '../assets/images/pinterest.svg';\r\n\r\nconst Menu = ({\r\n  search, getCategory, setcategory,\r\n}) => (\r\n  <nav className=\"nav-header\">\r\n\r\n    <li>\r\n      <img src={logo} alt=\"logo\" className=\"logo-header\" />\r\n    </li>\r\n    <li>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"button-inicio\"\r\n        onClick={() => {\r\n          setcategory('aesthetic');\r\n          search();\r\n          document.getElementById('searchbar').value = '';\r\n        }}\r\n      >\r\n        {' '}\r\n        Inicio\r\n      </button>\r\n    </li>\r\n\r\n    <div className=\"search\">\r\n      <form onSubmit={(event) => {\r\n        event.preventDefault();\r\n        search();\r\n      }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Buscar\"\r\n          name=\"search\"\r\n          onKeyPress={getCategory}\r\n          id=\"searchbar\"\r\n        />\r\n      </form>\r\n    </div>\r\n\r\n  </nav>\r\n);\r\nMenu.propTypes = {\r\n  search: PropTypes.func.isRequired,\r\n  getCategory: PropTypes.func.isRequired,\r\n  setcategory: PropTypes.func.isRequired,\r\n};\r\nexport default Menu;\r\n","\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Image, Modal,\r\n} from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport './Menu.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport heart from '../assets/images/heart.svg';\r\nimport dwnl from '../assets/images/download.svg';\r\n\r\nconst PhotoCards = ({\r\n  photo, username, profileImage, description, imgDownload, altDescription, likes,\r\n}) => {\r\n  const [showModal, setModal] = useState(false);\r\n  return (\r\n    <>\r\n      <div className=\"box\">\r\n        <img src={photo} key={photo} alt=\"collection\" className=\"card-image\" onClick={() => setModal(true)} onKeyPress={() => setModal(true)} />\r\n      </div>\r\n      <div id=\"modal-div\">\r\n        <Modal size=\"lg\" show={showModal} onHide={() => setModal(false)}>\r\n          <Modal.Header closeButton />\r\n          <Modal.Body id=\"pic-info\" className=\"modal-body\">\r\n            <div className=\"body-img\">\r\n              <Image src={photo} fluid className=\"container-img\" />\r\n            </div>\r\n            <div className=\"body-info\">\r\n              <h2 className=\"title-photo\">\r\n                {altDescription}\r\n                {' '}\r\n              </h2>\r\n              <p>{description}</p>\r\n\r\n              <p className=\"modal-body\">\r\n                <img src={heart} key={heart} alt=\"heart icon\" className=\"logo-heart\" />\r\n                {likes}\r\n\r\n                <a href={imgDownload} title=\"descargar imagen\">\r\n                  <img alt=\"descargar\" src={dwnl} className=\"logo-dwn\" />\r\n                </a>\r\n\r\n              </p>\r\n              <footer className=\"footer\">\r\n\r\n\r\n                Subido por\r\n                {' '}\r\n                <Image src={profileImage} fluid className=\"profile_image\" />\r\n\r\n\r\n                {username}\r\n              </footer>\r\n            </div>\r\n\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nPhotoCards.propTypes = {\r\n  photo: PropTypes.string.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  profileImage: PropTypes.string.isRequired,\r\n  imgDownload: PropTypes.string.isRequired,\r\n  likes: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default PhotoCards;\r\n","import React, {\r\n  useState, useEffect,\r\n} from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport SearchCollection from '../controller/SearchCollection';\r\nimport Menu from '../components/Menu';\r\nimport PhotoCards from '../components/PhotoCards';\r\nimport '../components/Menu.css';\r\n\r\nconst Home = () => {\r\n  const [dataCollection, setDataCollecion] = useState([]);\r\n  const [category, setcategory] = useState('aesthetic');\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [page, setPage] = useState(2);\r\n  const getCategory = (e) => {\r\n    setcategory(e.target.value);\r\n  };\r\n  const search = () => SearchCollection(pageNumber, category)\r\n    .then((res) => (setDataCollecion(res.results)));\r\n  useEffect(() => {\r\n    search();\r\n  }, []);\r\n\r\n  const viewMore = () => SearchCollection(page, category)\r\n    .then((res) => {\r\n      setPage(page + 1);\r\n      setDataCollecion((prev) => [...new Set([...prev, ...res.results])]);\r\n    });\r\n  console.log(category);\r\n  console.log(dataCollection);\r\n  return (\r\n    <>\r\n\r\n      <Menu\r\n        setDataCollecion={setDataCollecion}\r\n        search={search}\r\n        getCategory={getCategory}\r\n        setcategory={setcategory}\r\n        setPageNumber={setPageNumber}\r\n      />\r\n      <div className=\"container-collection\">\r\n\r\n        <InfiniteScroll\r\n          dataLength={dataCollection.length}\r\n          hasMore\r\n          next={viewMore}\r\n        />\r\n        {dataCollection.map((res) => (\r\n          <PhotoCards\r\n            key={res.id}\r\n            photo={res.urls.small}\r\n            username={res.user.username}\r\n            profileImage={res.user.profile_image.small}\r\n            description={res.description}\r\n            imgDownload={res.links.download}\r\n            altDescription={res.alt_description}\r\n            likes={res.likes}\r\n          />\r\n        ))}\r\n\r\n\r\n      </div>\r\n\r\n      <div />\r\n\r\n    </>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from 'react';\nimport Home from './containers/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}